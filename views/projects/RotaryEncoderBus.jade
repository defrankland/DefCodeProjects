include TagsList

h1 Rotary Encoder Bus
div
  br
  div <strong> Description: </strong>
  P Multiple encode/switch input using only 2 interrupt pins
  br
div /*
div NOTES:
div external interrupt pins on the ATmega168/328 are INT0 and INT1, and they are mapped to Arduino pins 2 and 3.
div This code uses the 2 interrupt pins + 2 additional pins for each encoder device attached
div */
br
div #define ENCODER1_PIN_UP 5
div #define ENCODER1_PIN_DN 6
div #define ENCODER2_PIN_UP 7
div #define ENCODER2_PIN_DN 8
div #define ENCODER3_PIN_UP 9
div #define ENCODER3_PIN_DN 10
br
div #define NUM_ENCODER_PINS 1 //3
br
div int enc = 0;
div int interruptCode = 0;
div int encEventNum = 0;
div int encTimeout = 0;
div int encNum = 99;
div int A_SIG=0, B_SIG=1;
div long milliLast = 0;
div boolean encChange = false, aRiseDone = false, aFallDone = false, bRiseDone = false, bFallDone = false;
br
br
div //map pins to name & state
div //***IMPORTANT: keep in pairs of pins that go together
div //Example: put pinUp, then pinDn
div byte encoderTbl[NUM_ENCODER_PINS][5] = {
div /*Pin Name               Corresponding      UpState    DnState     Count                                                     
div                           Pin Name                                                  */
div ENCODER1_PIN_UP,       ENCODER1_PIN_DN,       0,          0,        0,
div //ENCODER2_PIN_UP,       ENCODER2_PIN_DN,       0,          0,        0,
div //ENCODER3_PIN_UP,       ENCODER3_PIN_DN,       0,          0,        0
div };
br
br
div void setup()
div {
div   attachInterrupt(0, A_FALL, FALLING);
div   attachInterrupt(1, B_FALL, FALLING);
div    
div   for(int i=0; i<NUM_ENCODER_PINS; i++)
div   { 
div     pinMode(encoderTbl[i][0], INPUT);   //up pin
div     pinMode(encoderTbl[i][1], INPUT);   //down pin
div   }
div   
div   Serial.begin(115200);
div }
br
br
div void loop()
div { 
div   //Serial.print(encoderTbl[0][4], DEC);
div //  if(millis() - encTimeout > 1000)
div //  {
div //    encNum=22; aRiseDone = false; aFallDone = false; bRiseDone = false; bFallDone = false; clearEncTbl();
div //  }
div   
div     if(aRiseDone == true && aFallDone == true && bRiseDone == true && bFallDone == true)// || millis() - encTimeout > 2000)
div     {
div       encNum = 99;
div       aRiseDone = false; aFallDone = false; bRiseDone = false; bFallDone = false;
div       readEncTbl(); //check if state changes received
div       clearEncTbl(); //reset table after reading
div 
div       //encChange = false;
div       //Serial.println(encoderTbl[0][4]);
div 
div      //aRiseDone = false; aFallDone = false; bRiseDone = false; bFallDone = false;
div     }
div 
div     if (millis() - milliLast > 1000) 
div     {
div       //readEncTbl(); //check if state changes received
div       milliLast = millis();
div     }  
div }
br
br
div /**********************************************************************************************
div       A|B      A|B        Order of events: A_FALL, B_FALL, A_RISE, B_RISE ===> increase
div       ===      ===                                     ~~~OR~~~~
div       0|1      1|0                         B_FALL, A_FALL, B_RISE, A_RISE ===> decrease
div       0|0      0|0
div       1|0      0|1
div       1|1      1|1 
div **********************************************************************************************/
div void A_FALL()
div {
div   detachInterrupt(0);
div   //Serial.print(encNum); Serial.print("A_FALL\n");
div   A_SIG=0;
div   if(encNum > NUM_ENCODER_PINS && bFallDone == false){getEncoderNum();} //do only once
div   if(encNum < NUM_ENCODER_PINS)
div   {
div     if(B_SIG==1)
div       encoderTbl[encNum][4]++;//moving forward
div     if(B_SIG==0)
div       encoderTbl[encNum][4]--;//moving reverse
div     //Serial.print(encNum);  Serial.print(' '); Serial.println(encoderTbl[encNum][4]); 
div   }
div   aFallDone=true;
div   aRiseDone = false;
div   attachInterrupt(0, A_RISE, RISING);
div }
br
br
div void A_RISE()
div {
div   detachInterrupt(0);
div   //Serial.print(encNum); Serial.print("A_RISE\n"); 
div   A_SIG=1;
div   if(encNum < NUM_ENCODER_PINS)
div   {
div     if(B_SIG==0)
div       encoderTbl[encNum][4]++;//moving forward
div     if(B_SIG==1)
div       encoderTbl[encNum][4]--;//moving reverse
div     //Serial.print(encNum);  Serial.print(' '); Serial.println(encoderTbl[encNum][4]);
div   }
div   aRiseDone = true;
div   attachInterrupt(0, A_FALL, FALLING);
div }
br
br
div void B_FALL()
div {
div   detachInterrupt(1);
div   //Serial.print(encNum); Serial.print("B_FALL\n");
div   B_SIG=0;
div   if(encNum > NUM_ENCODER_PINS && aFallDone == false){getEncoderNum(); }
div   if(encNum < NUM_ENCODER_PINS)
div   {
div     if(A_SIG==0)
div       encoderTbl[encNum][4]++;//moving forward
div     if(A_SIG==1)
div       encoderTbl[encNum][4]--;//moving reverse
div     //Serial.print(encNum);  Serial.print(' '); Serial.println(encoderTbl[encNum][4]);
div   }
div   bFallDone = true;
div   bRiseDone = false;
div   attachInterrupt(1, B_RISE, RISING);
div }
br
br
div void B_RISE()
div {
div   detachInterrupt(1);
div   //Serial.print(encNum); Serial.print("B_RISE\n");
div   B_SIG=1;
div   if(encNum < NUM_ENCODER_PINS)
div   {
div     if(A_SIG==1)
div       encoderTbl[encNum][4]++;//moving forward
div     if(A_SIG==0)
div       encoderTbl[encNum][4]--;//moving reverse
div     //Serial.print(encNum);  Serial.print(' '); Serial.println(encoderTbl[encNum][4]);
div   }
div   bRiseDone = true;
div   attachInterrupt(1, B_FALL, FALLING);
div }
br
br
div void getEncoderNum()
div {
div   int pinA = 0, pinB = 0;
div   //delay(3);
div //  encoderTbl[0][2] = ((unsigned)encoderTbl[0][2] << 1) + digitalRead(5);
div //  encoderTbl[0][3] = ((unsigned)encoderTbl[0][3] << 1) + digitalRead(6);
div 
div   for(int encTblIdx = 0; encTblIdx < NUM_ENCODER_PINS; encTblIdx++)
div   {
div       pinA =  digitalRead(encoderTbl[encTblIdx][0]);
div       pinB =  digitalRead(encoderTbl[encTblIdx][1]);
div       if(pinA == 1 ^ pinB == 1)
div       {
div         encNum = encTblIdx;
div         encTblIdx = NUM_ENCODER_PINS; //exit the loop
div       }
div   }
div //  Serial.print(encoderTbl[0][4], BIN);
div //  Serial.print(' ');
div //  Serial.print(encoderTbl[0][3], BIN);
div //  Serial.print("\n~~~\n");
div }


  div void readEncTbl()
  div {
  div   for(int i = 0; i<NUM_ENCODER_PINS; i++)
  div   {
  div     if(encoderTbl[i][2] == 0b0011 && encoderTbl[i][3] == 0b1001) //increment
  div     {
  div       encoderTbl[i][4] += 4; //4 because of encoder quadrature
  div     }
  div     if(encoderTbl[i][2] == 0b1001 && encoderTbl[i][3] == 0b0011) //decrement
  div     {
  div       encoderTbl[i][4] -= 4; //4 because of encoder quadrature
  div     }
  div     Serial.print(encoderTbl[0][2], BIN);
  div     Serial.print(' ');
  div     Serial.print(encoderTbl[0][3], BIN);
  div     Serial.print(' ');
  div     Serial.print(encoderTbl[0][4], DEC);
  div     Serial.print("###\n");
  div   }
  div }
  br
  br
  div void clearEncTbl()
  div {
  div   for(int i = 0; i<NUM_ENCODER_PINS; i++)
  div   {
  div     encoderTbl[i][2] = 0;  //reset up pin to 0
  div     encoderTbl[i][3] = 0;  //reset down pin to 0
  div   }
  div }

  +TagList(selectedProject)